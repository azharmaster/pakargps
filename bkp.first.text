import 'dart:async';
import 'package:flutter/material.dart';
import 'package:geolocator/geolocator.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PAKAR GPS',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSwatch(primarySwatch: Colors.deepPurple),
        // useMaterial3: true, // Material3 support is still in development
      ),
      home: const GeolocationApp(),
    );
  }
}

class GeolocationApp extends StatefulWidget {
  const GeolocationApp({Key? key}) : super(key: key);

  @override
  State<GeolocationApp> createState() => _GeolocationAppState();
}

class _GeolocationAppState extends State<GeolocationApp> {
  String? _currentLocation;
  Timer? _timer;

  Future<void> _sendGeoLocation(String geolocation) async {
    try {
      final response = await http.post(
        Uri.parse('https://livetrack.pakarit.sbs/creatego.php'),
        body: {'geolocation': geolocation},
      );
      if (response.statusCode == 200) {
        print('Geolocation sent successfully');
      } else {
        print('Failed to send geolocation: ${response.statusCode}');
      }
    } catch (e) {
      print('Error sending geolocation: $e');
    }
  }

  Future<Position> _getCurrentLocation() async {
    bool serviceEnabled;
    LocationPermission permission;

    // Check if location services are enabled
    serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      throw 'Location services are disabled.';
    }

    // Check for location permissions
    permission = await Geolocator.checkPermission();
    if (permission == LocationPermission.denied) {
      permission = await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        throw 'Location permissions are denied';
      }
    }

    if (permission == LocationPermission.deniedForever) {
      throw 'Location permissions are permanently denied, we cannot request permissions.';
    }

    // Get the current position
    return await Geolocator.getCurrentPosition();
  }

  @override
  void initState() {
    super.initState();
    _timer = Timer.periodic(Duration(seconds: 5), (Timer timer) {
      _getCurrentLocation().then((Position position) {
        setState(() {
          _currentLocation = "${position.latitude}, ${position.longitude}";
        });
        _sendGeoLocation(_currentLocation!); // Send geolocation to API
      }).catchError((e) {
        print('Error getting location: $e');
      });
    });
  }

  @override
  void dispose() {
    _timer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Geolocation App'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            const Text(
              "Location coordinates",
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 6),
            Text(_currentLocation ?? "Coordinates"),
            const SizedBox(height: 30),
            ElevatedButton(
              onPressed: () async {
                try {
                  Position position = await _getCurrentLocation();
                  setState(() {
                    _currentLocation = "${position.latitude}, ${position.longitude}";
                  });
                  _sendGeoLocation(_currentLocation!); // Send geolocation to API
                } catch (e) {
                  print("Error getting location: $e");
                }
              },
              child: const Text("Get Location"),
            ),
          ],
        ),
      ),
    );
  }
}
